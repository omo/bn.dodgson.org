---
title: "第2回DHT勉強会 を見てきた"
date: 2006-09-18
---
<h3>近況</h3>
<p><a href="http://toremoro.tea-nifty.com/tomos_hotline/2006/08/dht2dht_f9ea.html">第2回DHT勉強会</a> を見てきた. 
DHT は P2P 用語で <a href="http://en.wikipedia.org/wiki/Distributed_Hash_Table">Distributed Hath Table</a> のこと. 去年も同じ主催者による 
<a href="http://muziyoshiz.jp/20050313.html">P2P勉強会</a>に
<a href="http://www.dodgson.org/omo/t/?date=20050228">参加している</a>. 我ながら野次馬だ. </p>
<p>以下メモ. 詳細は詳しいひとがどこかに書くと思うので主観駆動です.</p>
<h4>"オーバレイ構築ツールキット Overlay Weaver" と DHT 入門講義</h4>
<p><a href="http://shudo.net/diary/">shudo.net</a> のひとによる. 
<a href="http://overlayweaver.sourceforge.net/index-j.html">Overlay Weaver</a> (OW) 
というオーバーレイ・ネットワーク構築キットを作ったので試してね, という話...
を期待していったのだけれど, その前の入門講義に時間を食われて肝心なところは
スキップ気味だった. ちょっと残念. (でも入門は勉強になった.) </p>
<p>OW は 名前のとおり overlay network をつくるためのミドルウェアで, 
DHT 部分のアルゴリズムなど, 各レイヤが交換可能になのがミソ. 
アルゴリズムを交換して通信量やホップ数などのトレードオフを検証できるという. 
ルーティングの部分はアルゴリズムによっては数百行程度の Java で実装できるという話だった. 
一体どういう抽象化がなされているのか, 詳しいところはよくわからない. 
API/コードを見ろということなんだろうね. 
コードは 3万数千行. 去年の 6 月に実装を始めて三ヶ月くらいでおおよそ実装, 
1 月にリリースしたとのこと. スーパープログラマおそるべし. </p>
<p>可視化のデモが面白かった. 
<a href="http://overlayweaver.sourceforge.net/demo/index-j.html">スクリーンショット</a> は
見たことがあったけれど, やっぱり動いてるのはいいね. 
(帰宅後手元でも動かしてみた. かっこいい...) </p>
<p>質疑では悪意を持ったノードや通信状況が悪いとき(ノードの入退が激しいとき)の
シミュレーションについての質問があった. どちらも未対応/未実験とのこと. </p>
<h4>"世界規模情報共有プラットフォームの実現に向けて"</h4>
<p>自前の DHT 実装上で P2P の Web Browser 風アプリを作った話と, 
様々な DHT 実装をエミュレートして実験, 比較した話. 
アプリの方はいまいちよくわからず. 
実験の方は, 実際どうやって実験したのかの部分がよくわからなかったけれど, 
実験結果が目をひいた. </p>
<p>発表者のつくった実験基盤をつかうと, 
具体的な DHT 実装(コード)を使った実験ができるという. 
理論上のアルゴリズムだけでなく実装までを含めたベンチマークができるのは面白い. 
たとえば Overlay Weaver だと, 
そのフレームワーク上で自らアルゴリズムを実装しなおして比較することになる. 
そうではなく, 実装そのもの を試したということらしい. (たぶん.)
私は専門家じゃないので, 結果で示された実装の優劣にはあまり興味がない. 
どちらかといと実験そのものに興味をひかれ, 
理論値じゃなくて実装をもって比較するの意義を見直した. 
アルゴリズムのオーダーが同じなら, (実験でしかわからない)定数部分で大きく差がつくからね. </p>
<p>なお発表者の加藤さんの方法は他のものより通信量が少なく, 
逆に Overlay Weaver はそれが大目という結果だった. </p>
<h4>"P2Pエージェントプラットフォーム PIAX の理念と実装"</h4>
<p>mobility とか agent とかいう言葉がとびかい, いかにも情報科学という感じの話だった. </p>
<p>それはさておき, このシステムでは DHT 相当の機能を実現するアルゴリズムに
"Skip Graph" という方法を採用している. 発表者の吉田さんはこれを強く推していた. 
DHT と Skip Graph の違いは Java でいうと HashMap と TreeMap の違いようなもの
だというのが私の解釈. たとえば, 値としてのキーの近さ ( ex. abs(key1 - key2)) ) と
ネットワーク上でのノードの近さに相関がある. あとはキーを hash にせずそのまま使える. 
みんな Skip Graph 使おうぜ, というノリだった. (もうちょっと慎重な言い方でしたが.) 
モバイルのような位置情報が絡むシステムでは, 情報の "近さ" が重要な要素らしい. 
だから範囲検索ができる Skip Graph の性質が生きるわけね. </p>
<p>もう一つ面白かったのは, 
一次元の値だけをキーにできる Skip Graph 上で
どう二次元の位置 (緯度経度) をキーにするかという話. 
<a href="http://en.wikipedia.org/wiki/Hilbert_curve">ヒルベルト曲線</a>] で
エンコードするらしい. かっこいいいーー! </p>
<p>この事実は発表後の質疑応答でぼそっと明らかになったのだが, 
むしろこれは大自慢ポイントじゃないの? 
ヒルベルト曲線を使った空間のエンコードは局所性を保存できて便利. 
そういう性質は, 以前 
<a href="http://www.cgl.uwaterloo.ca/Projects/rendering/Papers/">ヒルベルト曲線をラスタライズに使う話</a> で聞いていた. 
もしかしたら P2P 業界やネットワーク屋さんの間では当然なんだろうか. 
そもそも正しい計算機科学者の基礎知識なのかもしれない. 
自分の無知軽薄にちょっとめげる. まあいいです...</p>
<h4>"AsagumoWeb Web over P2P システムの設計と実装"</h4>
<p>P2P のネットワーク上にウェブっぽいものを作りました, という話. 
localhost に P2P 世界への gateway して振る舞うノードがいて, 
そこにブラウザを繋いでつかう. 
個人的にはこういう具体的なものを作った話が楽しい. 
勢い余った感が面白かった. </p>
<p>技術的に面白かったのは, 動的なコンテンツを実現するために
アプリケーションをダウンロードして gateway 内で実行するというアーキテクチャ. 
ダウンロードしてきたアプリケーションが
ブラウザの中ではなくその一歩手間の gateway server で動くというのが
ちょっと新しい気がする. まあ agent だと言ってしまえばそれまでだけど. 
語感としての servlet はこういうものだよなと思った. </p>
<p>発表者は, もともとの動機として
資本のない個人で作ったサイトの人気が出てしまった時に負荷分散がしたいと話していた. 
それに対し, "採用しているプロトコルだとそういう負荷分散はできないのでは" 
と質疑でのツッコミが. 指摘どおりとのこと. なんてこったい...</p>
<h4>"Chord プロトコルを活用したシステム開発の実際"</h4>
<p>修士論文のために <a href="http://pdos.csail.mit.edu/chord/">Chord</a> の実装を使おうとしたら
腐りまくってて大変だったよまったく...という苦労話. 愚痴の内容がプログラマ的に面白かった. 
発表者の藤田さんは割と年季の入ったかんじの UNIX ハカーなのだけれど, 
そんな人がハマるなんて手強いんだろうね. </p>
<p>彼の研究は P2P を使ったストレージを作ることらしい. 
その動機付けとして図書館学からの要請があるという話は面白かった. 
オンラインのデジタル資料すべてを数百年のオーダーで保存する, というのが
究極のゴールだという. そいつはなかなか...Google もびっくりの grand challenge だなあ. 
官製検索エンジンを作る金はこっちに回した方がよさそうだ. </p>
<p>発表の中味とは全然関係ない話: 
藤田という人は絵に描いたようなおっさんプログラマで, 妙にかっこよかったというか, 
おっさんになってもプログラマでいるというのはこういう感じなんだなと思った. (良い意味で.) 
ぐぐると <a href="http://www.unixuser.jp/articles/root/root73.html">雑誌インタビュー</a> 
を発見. 読むからに凄腕っぽいが, 企業勤めの凄腕プログラマが
プログラマを続けるために独立してフリーランスになる必要を感じたというのは
日本の厳しさを直視させる事実だなあ. 凄腕じゃない私の未来に不安を禁じえない. </p>
<h4>"ＤＨＴにおけるセキュリティ対策"</h4>
<p>発表者の西谷さんの <a href="http://toremoro.tea-nifty.com/tomos_hotline/">ページ</a> 
でたびたび議論されている内容のまとめ. (たぶん. 新しい話もあったのかも.) 
セキュリティという話題の手前, おおよくわからんけどすごいぜ! という感じの内容ではない. 
ただ実用を考えると不可避な話題だけに, 眠いなりに聞いた. 
別に話がつまらなかったわけではなく, 私はセキュリティが苦手なのでした...</p>
<h4>所感</h4>
<p>話題が DHT という狭いトピックに集中しているせいか, 
はたから見るとけっこう専門性の高い内容のものが多い. 
質疑も議論が多くて面白かった. </p>
<p>私が DHT を知ったのは, Winny に触発されて P2P の勉強をしていたころのこと. 
その頃に 
<a href="http://en.wikipedia.org/wiki/Content_Addressable_Network">CAN</a>, 
<a href="http://en.wikipedia.org/wiki/Kademlia">Kademlia</a> 
あたりまでは資料を読んだ気がする. 今日はそんな名前が色々でてきて面白かった. 
この頃は暇潰しに端から読んでいただけで概念を整理できていなかったけれど, 
一連の発表や
<a href="http://www.shudo.net/publications/JIPDEC-P2P-20060113/">首藤さんの入門講義</a>
を聞いたおかげかだいぶ整理できた. 
要するに Structured Overlay というゴールがあって, 
そのための経路管理に DHT やその亜種があるのだな. 
(<a href="http://www.shudo.net/publications/SACSIS2006-OW/slide19.png">この図みたいなかんじ.</a>) 
こうやってアーキテクチャが整理されるとなんとなくわかった気になれて安心する. 
ただアーキテクチャの切り方にも難しさはあって, 
現在の Overlay Weaver にも dirty な部分はあるという話だった. 
このへんは専門的すぎてわからず. </p>
<p>あと私はなぜか 
<a href="http://www.ic.unicamp.br/~celio/peer2peer/skip-net-graph/">Skip Graph</a> 
の論文も読んでいたことを話を聞いて思いだした. (グラフという言葉に弱い.) 
これを読んだ時は単に理論的な可能性を示しただけのネタだと思っていたので 
(アルゴリズムの世界ではそんなパターンがよくある), 
実装したと聞いてとても驚いた. こんな複雑なものをよくもまあ...と. 
ただ他の DHT アルゴリズムの説明を聞いていると, どれもそれなりに複雑だった. 
Skip Graph だけが特別複雑ということではないのかもしれない. 
作ってみないとわからないところだな. 
でも Structured Overley って複雑なんじゃなかろうか. 
野良の世界でちゃんと生きていけるのかしら... 
実際にものを作った上で対障害性などの運用を含めた
実装寄りのゴタゴタを乗り切れる体力と割り切りのある人が生き残るのかもしれない. 
分散ってそんなかんじだよね. きっと. </p>
<p>もう一つ思ったのは, 分散というのは実験が大変な世界なんだということ. 
P2P は特にその傾向が強そう. 
これは仕事で分散環境を扱っている人にはあたりまえなんだろうけれど, 
私はふだん単一 CPU 相手の仕事なので話を聞くまで想像できていなかった. 
実験を考慮に入れている (と思われる) Overlay Weaver さえ
PC 一台数百ノードで合計 PC 数十台の数万ノードという実験しかできない. 
ネットワークのスケーラビリティーが重大な関心であるにもかかわらず
実験が大変というのは, 大変だよなあ. </p>
<p>もっとも自然科学の世界だと実験が大変なのは当たり前, 
実験スキルは学者の能力の一部だったりする. 
対象が複雑になるにつれて, 計算機工学の世界でも自然科学のように
実験の重要性が高まるのかもしれない. 
学問として, 複雑な対象をがんばって実験してデータとって考察する研究が
評価される方向に進む. それは健全な気がする. 
マルチキャストのシミュレータが修論だったという同僚をふと思いだした. </p>
<p>そんなかんじで仕事とまったく無関係な話を聞き, 
連休最終日らしい一日を楽しみました. </p>
