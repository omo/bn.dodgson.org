---
title: "かく語りき"
date: 2008-10-16
---
<h3>かく語りき</h3>
<p>いま読んでいる本の中で 
"<a data:asin='0914845713' href='http://www.amazon.co.jp/Programmers-at-Work-Susan-Lammers/dp/0914845713%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0914845713'>Programmers At Work</a>" が面白いよと紹介があった. 
80 年代に一山あてたプログラマのインタビュー集. 20 年前の本だから, さすがに絶版だった. 
でも著者が一部のインタビューを <a href="http://programmersatwork.wordpress.com/">オンラインで公開している</a>. 
中には我らが billg のインタビューも. MS 歴の中では IPO 前後くらいの頃らしい.
若気の至りや時代の流れを感じる部分もあるれば, 
一方に感心する部分もあった. 
全部訳すのは大変だし版権も面倒なので, ちょっとだけ抜粋. 
<a href="http://programmersatwork.wordpress.com/bill-gates-1986/">全文</a>を読むと, 
より信仰は深まると思います. </p>
<blockquote><p><em>インタビュア</em>: 
160 人もプログラマのいる Microsoft のような会社で
良いプログラムを開発する環境をつくるにはどうすれば良いのでしょう? </p>
<p><em>GATES</em>: 
小さなプロジェクトチームを作るのが一つのやりかただ. 
だいたい 4, 5 人くらいで, 各々がプログラムを理解する確固たる技術を持っている. 
そしてリーダーに何かわからないことがあっても, 
より経験のあるプログラマと相談できなければいけない. 
僕らのやりかたの一部だが, プログラマがコーディングフェーズの前に全てを考え抜いておくという手がある. 
設計文書を書くのは不可欠だ. なぜなら多くの単純化を思いつくのは, 
アルゴリズムで表現したプログラムを眺めるときだからだ. 
それは言ってみれば, 最小の姿で表現されているから, プログラマは重複を見抜くことができる. </p>
<p>もう一つ重要なのがコードレビューだ. コードに目を通して, 
上級者が何かもっとうまいやり方のヒントくれないか確かめるんだ. 
自分のプロジェクトと同じような, ずっと上手くいった他のプロジェクトもレビューしなければならない. 
その連中がこれまでどうやってうまくやったのかを知ることができる. 
他のプロジェクトから自分のプログラムをよくするアイデアを得ることができる. </p>
<p><em>インタビュア</em>: 
すごいソフトウェアを作れる才能ある人々の気をひくのは大変だと, 
大きなソフトウェア会社が嘆くのをよく聞きます. 
なにしろそういう一匹狼は独立指向が強すぎて, 一人勝手に働きたがるのだと. 
優秀な人々をつなぎとめるために, Microsoft はどうしていますか?</p>
<p><em>GATES</em>:
すごいプログラマはソフトウェア製品を作ることに大きな価値を置いている. 
でも僕は, プリマドンナ式がうまくいくとは思っていない.  
優秀な奴のコードには口を挟まずにやらせておけとか, 
周りとのコミュニケーションに煩わせるなとか, そういう奴の信念に周りを従わせろとか. 
僕らに必要なのは, 心から互いに尊敬しあえる相手だ. 
すごいプログラマは他のすごいプログラマと一緒にいたいはずだと僕は思う. 
とっておきのアルゴリズムを思いついたときには, 
そのクレバーさをわかってくれる同僚が欲しい.
そういうアイデアを思いついても, 胸の内に抱えているのは孤独なことなんだ. 
物事がややこしくなってきたと感じて, それを単純にする方法を見出したとする. 
すごいぜ, と思う. でも他人のフィードバックも欲しいんだよ. 
優秀なのが何人かいれば, 残りはあとからやってくるのさ. </p>
<p>古いルールがあって, 
プログラマの管理職はもっと良いプログラマであるべしというものだ. 
それと, 僕らが "技術的逆行" と呼ぶ状態もあってはいけない. 
つまりプログラムのわからない誰かの下でプログラマを働かせるなということだ. 
この思想は今でも守っている. ある程度の段階ではビジネス系の管理職もいるけれど, 
プログラミングのプロジェクトを管理する非プログラマはいない. </p>
</blockquote>
<p>"Joel や Paul の孫引きですか？" という印象もうけるけれど, 
インタビューは 1986 年. こっちが本家なのは言うまでもない. </p>
<p>既存のコード, そしてチームでの議論から何かを学ぶことへの強い執着を感じる. 
コードレビューを, 他人に読んでもらうだけでなく, 
自分が他人のものを読んで学ぶ機会だと位置づけているのは少し面白い. 
インタビューには PDP OS (Unix のことかな?) の話もでてくるし, 
もし billg が今時の若者だったら世のコードを読みまくって, 
Google みたいに OSS フル稼動な会社を作ったかもしらんなあ...と思ったけれど, 
Linux の隆盛の一端は Windows 独裁への反骨精神が支えているといった面もある. 
歴史は繰り返せない. </p>
