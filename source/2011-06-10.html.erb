---
title: "心はさらわれるもの"
date: 2011-06-10
---
<h3>心はさらわれるもの</h3>
<p>購読しているブックマークからリンクされていた 
"<a href="http://d.hatena.ne.jp/taichitaichi/20110609/1307641027">一歩先行くJavaプログラマが読むべきオープンソースソフトウェア10選</a>"
という記事が面白かった. この人はだいぶ色々読んでいてすごい. 
Java には読むのに良いコードが色々あるものだと見直した. </p>
<p>私は推薦リストを作るには至れない. 
本もコードも, 読んだ直後に気分が盛り上がって紹介することは時々あれど,
お勧めするほどには自分の趣味や記憶を信じられていない. </p>
<p>私の読書/コード体験にはストックホルム症候群みたいなところがある;  
苦労して何かを読んだあとはつい, こいつは必読/珠玉の一冊/ツリーだ! と思ってしまう.
これを読んでないヤツは素人, なんて気分にすらなる. 
友人も似たようなことを言っていたから,
もしかしたらよくある気分なのかもしれない. </p>
<p>そんな気分になったら, 私は架空の積読タワーに思いをめぐらせ, 
この山と積まれた本やツリーはどれも読んだあとはきっと珠玉必読よまねばもぐりなマスターピースと映るに違いないと考え, 
もぐりで素人な自分と心の平静を取り戻している. </p>
<p>けれどこんな態度はうかつさが足らず退屈とも思う.</p>
<h4>心をさらわないコード</h4>
<p><a href='http://knowyourmeme.com/memes/facepalm'><img src='http://webservice.imagesauce.net/image/579079/250x.jpg' class='right'></a></p>
<p>珠玉必読が軒を連ねる一方, 読んだあとにこりゃダメだとがっくりくるコードも世の中には結構ある. 
銃口の媚薬をかき消すダメなコードの話をするのは,
良いコードの話と同じくらい面白い. 
認知の重力を抜け出せたのには何かわけがあるだろうから. 少くとも私にとっては.</p>
<p>さっそく思いつくままに並べてみたい. </p>
<p>私の中でのこりゃダメだの代表は <em>MySQL</em>. 
これを見て C++ を罵倒されたり, 逆にここからプログラミングを学ばれだりするとたまらない. 
あのカオスの中でクエリーを最適化できるハッカーたちの腕力には頭がさがるけれど, 
歴史が許せばなかったことにしてほしいと思う. いやなくならなくていいから書き直してほしい. 
<a href="http://drizzle.org/">Drizzle</a> では荒廃した pluggable storage インターフェイスが書き直されており希望を感じた.
InnoDB は比較的よいとおもう. ただ古いよね. </p>
<p><em>Tamarin</em>. 普通に質が高くない. 
スマートポインタを使って write barrier するトリックはクールだと思ったけれど, 
C++ ベースの言語処理系で参照を特別なスマートポインタに入れるのは特段珍しくもないことを後から知った. 
ES4 も亡くなったことだし SpiderMonkey でいいんじゃないかな読むのは. </p>
<p><em>JavaScriptCore</em>. 速さの秘密は気になるものの, 
歴史的経緯と市場の圧力で素敵なコードに育つ時期を逸してしまった気配がある. 
"わたしが一番きれいだったとき / 街々はがらがら崩れていって / とんでもないところから / 青空なんかが見えたりした" と
茨城のり子はうたったけれど, そんなかんじ. 
まあ慣れればいじれるのかもしれない. </p>
<p><em>Python</em>(2.x). 特段酷くもないけど, なんというかフツーだった. 
言語処理系はだいたい一つ読むと飽きるので, 
貴重な好奇心はもっとクールなコードに費すのが良いと思う. 
(Python が好きな人はこの限りでない.)</p>
<p><em>GCC</em>. もう Clang でいいよ. C で lisp の真似事しちゃダメだよ...</p>
<p><em>LLDB</em>. あまりに 1990-ish. これが 2010 年に書かれた事実に胸が痛む. 
でも gdb は輪をかけて悲惨だからデバッガのコードが読みたいなら我慢するしかない. 
LLDB に限らず LL ファミリーはもどかしい子が多いです. </p>
<p><em><a href="https://github.com/nex3/maruku">Maruku</a></em>. 
<a href="https://github.com/mojombo/jekyll">Jekyll</a> が使っている Ruby 製の markdown parser. 
Jekyll の markdown 整形がどうにも上手く動かず, 自分が何かを勘違いをしているかもとコードを覗いて絶望した. 
markdown パーサみたいに単純(そう)なものをここまで複雑にできるのか...
ruby だからといってコードがまともとは限らない良い例.</p>
<p><em>Mozilla</em>. 実際悪くないしクールだけれどなにしろでかすぎる. あと XPCOM コンベンションは辛い. 
Mozilla はドキュメントが充実しているから, まずそれを読む方が学ぶことは多い気がする. 
そしてドキュメントを読むとだいたい満足する, と思う. なおこれは C++ レイヤの話. JS レイヤは知らない.
あとブラウザはどれも概ねでかいじゃんと問い詰められると反論できないので見逃してください.</p>
<p><em>JUnit</em>. よく勧める人がいるけど, API でだいたい想像がつくものの中身はいまいち楽しくない. 
ダメというより優等生すぎてつまらない. 
もしかすると私は API デザインがドキュメントも含めきちんとしているものには食指が動かないのかもしれない. 
フレークワークの類も同じ理由で興味が湧かない. 
このへんの匙加減は悩ましい. お勉強という意味では読んだ方がいいんだろうけど, 
お勉強という理由だけでコードを読むのはしんどい.</p>
<p>つづき. 最近だと <a href="https://github.com/twitter">Twitter</a> 周辺で作られている Scala 製サーバのうちいくつか. 
(たとえば <a href="https://github.com/robey/kestrel">Kestrel</a> や <a href="https://github.com/twitter/gizzard">Gizzard</a>.) 
ちょっと読んだ範囲では教科書や論文や Blog をみながら作ってみましたというカジュアルなコードだった. 
カジュアルな物を読むよりは由緒正しいものを読んだ方が色々面白い気がする.
あるいはコード以前に教科書や論文をあたるのもよいとおもう. 
ただ読んでないコードものも結構あるので, この印象は濡れ衣かもしれない. 
あと Twitter ファンの場合この限りでない.</p>
<p>そういえば先の記事にでてきた h2dabatabse の前身(?)である <em>hsqldb</em> はひどいコードだった. 
その頃は Java 製のデータベースを探していて, hsqldb の次には <em>Derby</em> を眺めた.
hsql のバンカラなコードとは逆に, 
Derby は abstraction と indirection が深過ぎ挫けた記憶がある.
ちょうどいい感じに書かれた RDB はどこかにないものか. 
SQLite は謎の VM が入っているなど面白いところは多いけれど,
並列性とかクエリーの評価みたいな RDB に肝心の所はさぼっているからなあ...</p>
<h4>愛すべきリストたち</h4>
<p><span class='image'><a href='http://www.amazon.co.jp/%E3%83%95%E3%82%A7%E3%82%A4%E3%82%B9%E3%83%96%E3%83%83%E3%82%AF-%E8%8B%A5%E3%81%8D%E5%A4%A9%E6%89%8D%E3%81%AE%E9%87%8E%E6%9C%9B-5%E5%84%84%E4%BA%BA%E3%82%92%E3%81%A4%E3%81%AA%E3%81%90%E3%82%BD%E3%83%BC%E3%82%B7%E3%83%A3%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AF%E3%81%93%E3%81%86%E7%94%9F%E3%81%BE%E3%82%8C%E3%81%9F-%E3%83%87%E3%83%93%E3%83%83%E3%83%89%E3%83%BB%E3%82%AB%E3%83%BC%E3%82%AF%E3%83%91%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF/dp/4822248372%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822248372' class='bookcover'><img data:asin='4822248372' class='asin image-right' src='http://ecx.images-amazon.com/images/I/51jrsHR%2BEfL.jpg'></span></a></span></p>
<p>一通り罵倒して憂さを晴らし気が済んだ. やれやれ...</p>
<p>自分のものはさておき, 誰か他の人のリストを眺めるのは好きだ. 
中でも印象にのこっているのは我らが父  Michael Feathers のリスト
"<a href="http://blog.objectmentor.com/articles/2009/02/26/10-papers-every-programmer-should-read-at-least-twice">10 Papers Every Programmer Should Read (At Least Twice)</a>". 
たぶん半分くらいは読んだ気がする. 今更 Parnas の書いたものを読んだところで観光以上の意味があるとも思えなかったけれど, 
ソフトウェア工学も 40 年前よりは進化していることがわかったのはよかった. </p>
<p>このリストは多くの Feathers ファンを刺激したらしく, 派生して書かれた
"<a href="http://www.rgoarchitects.com/nblog/CommentView,guid,ee9b28a4-7f61-4d7b-8796-b82420097c96.aspx">10 Papers Every Software Architect Should Read (At Least Twice)</a>" 
というリストもある.</p>
<p>他人のリストを眺めるのが楽しいのは, そこに書き手の人となりが滲むからでもある. 
<a data:asin='4798116831' href='http://www.amazon.co.jp/%E3%83%AC%E3%82%AC%E3%82%B7%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E6%94%B9%E5%96%84%E3%82%AC%E3%82%A4%E3%83%89-Object-Oriented-SELECTION-%E3%83%9E%E3%82%A4%E3%82%B1%E3%83%AB%E3%83%BBC%E3%83%BB%E3%83%95%E3%82%A7%E3%82%B6%E3%83%BC%E3%82%BA/dp/4798116831%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798116831'>レガシーコード改善ガイド</a> だけを読むと
Feathers を強面のデスマ帰還兵と思い違っても不思議はない. 
でもこのリストからは literature を愛するもう一つの顔を覗けて親しみがわく. 
Parnas についても "この paper は古いが人類の進歩を感じたよ" という旨の感想を書いておりシンパシーした. 
フェイスブックのプロフィール欄を読み漁ったスタンフォード生のきもちが少しはわかったかもしれない.</p>
