---
title: "読んだ論文をメモしておく"
date: 2005-05-04
---
<p>近況</p><p>読んだ論文をメモしておく.</p><p></p><p>最近読んだ論文: <a href="http://www.hoard.org/">Hoard: A Scalable Memory Allocator for Multithreaded Applications</a> </p><p>マルチスレッド、 マルチプロセッサの環境で効率的に動くメモリアロケータの実装について. </p><p>基本的なアイデアは, スレッド毎(プロセサ毎)にメモリブロックをキャッシュするというもの. スレッド間でメモリブロックを共有すると, 排他制御のオーバーヘッドや False Sharing(スレッド同士が CPU のキャッシュを殺しあう現象)が頻発して遅くなるが, スレッド毎のキャッシュをもつことでそういう問題を回避できるらしい. 実際には他にも問題はあって色々やっているのだが, だいたいそんなかんじ.</p><p>これをよんだきっかけは, <a href="http://code.google.com/">Google Code</a> で公開されていた <a href="http://goog-perftools.sourceforge.net/">perftools</a> 付属のメモリアロケータ実装. <q>The fastest malloc we've seen</q> などと主張しているのでどんなものかとドキュメントを読んでみたら, マルチスレッド/マルチプロセスの環境で速いという話だった. これも Hoard 同様スレッド毎にキャッシュを持つことで高速化をしている. 似たような話がないかと探して上の Hoard をみつけた次第. </p><p>perftools の文書では <a href="www.malloc.de/en/">ptalloc</a> という実装との比較は載っているが, Hoard とは比較されていない. ぜひ対決してほしい. 外野の要望.</p><p></p><p>最近読んだ論文: <a href="http://www.research.ibm.com/xj/pubs/f442-harren.pdf">XJ: Facilitating XML Processing in Java</a></p><p>XML を Java の first class object として扱えるようにしましょうという話. 実装もあり, <a href="http://www.alphaworks.ibm.com/tech/xj">alphaWorks 内</a> からダウンロードできる．(試してない.)</p><p>主に以下のような拡張がある.</p><p></p><p> <ul></p><p>  <li>XML Schema を Java の pakcage のような感覚で import できる.</li></p><p>  <li>XPath が文法に build-in されている.</li></p><p>  <li>XML をコード内にうめこめる.</li></p></ul><p></p><p> ざっと見ていく.</p><p></p><h4>XML Schema を Java の pakcage 感覚で import できる.</h4><p></p><p> たとえば本文中の例だと, "po.xsd" という schema のファイルがあった時</p><p></p><pre><p>import po.*;</p></pre><p></p><p> と書ける. そうするとその Schema の Java binding がコード内からアクセスできるようになる. 要するに <a href="http://www.relaxer.org/">Relaxer</a> とか <a href="http://java.sun.com/xml/jaxb/">JAXB</a> みたいなのが言語に組込まれるということらしい. XML 由来のオブジェクトには toXML() というメソッドがあって, これで文字列化する. 読み込むメソッドもある. そういう (de)serialize のタイミングで Schema の検証をおこない, 変な XML ができるのを防ぐという. (このへんは Relaxer/JAXB も同じだから, 結局は直接 schema を import できるというのが新しいということになる.)</p><p></p><h4>XPath が文法に build-in されている.</h4><p></p><p> これは Perl や Ruby の正規表現みたいなものだと思えばよさそう. 言語に組込む最大の利点は文法をチェックしてくれることかな. 文法はこんなかんじ(本文からコピー):</p><p></p><p> <pre></p><p>Sequence&lt;item&gt; bulkPurchases =</p><p>  po[| /item[quantity &gt; $discQuantity] |];</p></pre><p></p><p> "$" を使って Java の変数を参照する. なかなか自然でよい. あれば使う気がする.</p><p></p><h4>XML をコード内にうめこめる.</h4><p></p><p> 例:</p><p></p><p> <pre></p><p>USPrice price = new USPrice(&lt;USPrice&gt;4.95&lt;/USPrice&gt;);</p><p>item cup order =</p><p>  new item(&lt;item partNum='456-CU'&gt;</p><p>              &lt;productName&gt;cup&lt;/productName&gt;</p><p>                 &lt;quantity&gt;12&lt;/quantity&gt;</p><p>                    {price}</p><p>           &lt;/item&gt;);</p></pre><p></p><p> コードのミタメは衝撃的だ. XML の中にコードを埋めこむ仕組みは PHP の系列で色々あるが, これはその逆. 文字列でなく XML である利点は, コンパイル時に妥当性チェックができることかな. これの便利さはいまいちわからない. 使うんだろうか...</p><p></p><p> XML が言語の一部になると便利というのはわかった. ただ Java よりもスクリプト言語にくっつけた方が有難味は大きい気がする. たとえば schema の import などは, 開発環境に統合されていれば十分. Java はどうせコンパイルするので, build の中で schema の build もすればいい. 言語内に XML をハードコードするのも, むしろスクリプトでやっつけ仕事をするのに重宝しそうだ. たとえば ruby と eruby を組み合わせて何かするような場面でこれが使えたら便利に違いない.</p><p>こんな機能が <a href="http://groovy.codehaus.org/">Groovy</a> にあったら使うな. 彼らは <a href="http://groovy.codehaus.org/GPath">GPath</a> というオブジェクトグラフ検索言語のようなものを提唱しているけれど, これの代わりに XJ のような拡張があったら XML 処理用スクリプトとして決定打になると思う．</p><p></p><p> なお, related works によれば似たような研究は多いらしい. ECMAScript だと <a href="">E4X</a>, C# だと <a href="http://research.microsoft.com/Comega/">Comega</a> というのがあった.</p>
