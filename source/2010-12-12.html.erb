---
title: "プログラマが知るべき 97 のこと"
date: 2010-12-12
---
<h3>プログラマが知るべき 97 のこと</h3>
<p><span class='image'><a href='http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%8C%E7%9F%A5%E3%82%8B%E3%81%B9%E3%81%8D97%E3%81%AE%E3%81%93%E3%81%A8-%E5%92%8C%E7%94%B0-%E5%8D%93%E4%BA%BA/dp/4873114799%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114799' class='bookcover'><img data:asin='4873114799' class='asin image-right' src='http://ecx.images-amazon.com/images/I/511RPej0BNL.jpg'></span></a></span></p>
<p>「<a data:asin='4873114799' href='http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%8C%E7%9F%A5%E3%82%8B%E3%81%B9%E3%81%8D97%E3%81%AE%E3%81%93%E3%81%A8-%E5%92%8C%E7%94%B0-%E5%8D%93%E4%BA%BA/dp/4873114799%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114799'>プログラマが知るべき 97 のこと</a>」
日本語版のエクストラとしてちょこっと書かせてもらいました. エッセイ集のような本で, 読切 Blog 記事一気読み, みたいなノリで読めます.  
<a data:asin='4873114292' href='http://www.amazon.co.jp/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88%E3%81%8C%E7%9F%A5%E3%82%8B%E3%81%B9%E3%81%8D97%E3%81%AE%E3%81%93%E3%81%A8-%E9%88%B4%E6%9C%A8-%E9%9B%84%E4%BB%8B/dp/4873114292%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114292'>ソフトウェアアーキテクトが知るべき(同上)</a> の続編というかんじですが, 
アーキテクトもプログラマも大差ないので片方読んで面白かったらもう一方も楽しめると思います. 
(<a href="http://www.eaipatterns.com/gregor.html">両方に書いてる人もいます</a>...) </p>
<p>一編 2 ページくらいの長さに揃っているので割と読み易い一方, 私のようにぐだぐだ長々と書く傾向の人間が書くと
ややあっさりしてしまう気がした. ここで続きをちょっと書きたい. </p>
<h4>パッチのなやみ</h4>
<p>私が書いたのは, "良いコード" と "良いパッチ" はときどき相反することがあるからどうしましょうね, という話だった. 
良いコードはさておき良いパッチとはどんなものだろう. という話は本を買っていただきたくおもいますが, 
端的に言えばレビュアがレビューしやすいパッチは良いパッチ, という基準で話をすることが私は多い. 
更に下心を打ち明けるなら, レビュアがオッケーといいやすいパッチを良いパッチと呼びたい事もある. </p>
<p>私が仕事で紛れこんでいるプロジェクトはパッチ単位でのレビューを必須としている. 
ところがパッチの数に較べるとレビュアの絶対数が足りていないため, コードを書けばすぐレビューされるわけではない.
いかにレビュアの目にとまり, レビューしてもらうか(更にオーケーを貰うか)はコードを書くときにとても気を使う. 
近所の同僚がレビューできるコードなら耳元でお願いすればいいけれど, 
海や会社をまたいだ誰かに見てほしい時は困る. </p>
<p>俗説によれば, パッチのサイズとレビューされやすさは反比例する. 小さいパッチほどレビューされやすい. 
けれどいつもパッチを小さくできるとは限らない. </p>
<p>まず意図する変更が本当に大きいとき. 
大きな変更は小さな変更に分割しろというけれど, 
全体の意図抜きに小さい変更ひとつだけを見せられても
レビュアには単なるコードあそびや金メッキに見えてしまう. </p>
<p>チェックを一行足せば症状は消えるけれど本当は大きく構造を直した方が良いときもある. 
選択肢があるぶん単なる大変更より悩ましい. 
レビューのされやすい一行フィックスを選ぶか, 
レビュアに見過ごされる覚悟で構造の変更から始めるか. 
とりあえずバグを直して, それから構造を整えようか. 
でもバグを直したあとでも二手目をやる気になるかしら...</p>
<p>複数のパッチに切り分けた途端に変更の敷居があがる. 
これはパッチ主体の開発プロセスが抱える問題だとおもう. </p>
<h4>隣の芝いろいろ</h4>
<p><span class='image'><a href='http://www.amazon.co.jp/%E5%85%A5%E9%96%80Git-%E6%BF%B1%E9%87%8E-%E7%B4%94-Junio-Hamano/dp/4798023809%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798023809' class='bookcover'><img data:asin='4798023809' class='asin image-right' src='http://ecx.images-amazon.com/images/I/41R5gj5VRFL.jpg'></span></a></span></p>
<p>世のプロジェクトはそれぞれのやり方でこの問題を扱っている. </p>
<p>開発主体が分散していない <em>企業主導のプロジェクト</em> では気軽にブランチを使うことができる. 
大きな変更のためのブランチを切る. そしてブランチ上で一連の変更を行い, 
切りのいいところでトランクにマージする. 
変更にあわせ, 開発者はレビュアに face to face で意図を説明する. 
その道筋を踏まえ, レビュアはブランチ上の部分変更をレビューする. </p>
<p>ブランチは "複数のパッチに切り分けられた大きな変更" そのものだから, この方法は自然だし効率的もいい. 
一方でレビュアと直接話をする機会を持たないプロジェクトメンバは不公平/不透明に感じるかもしれない. </p>
<p><em>Linux</em> は 連番をつけたパッチ列をメーリングリストに投稿する. 大変更の意図は冒頭で説明する. 
この方法はフェアだと思うけれど, いまさらメールですか...という気にもなる. 
今はもう少しモダンな方法をとっているのかもしれない. </p>
<p>分散バージョン管理システムを使うと, 冒頭の企業主体なブランチ方式をもっとオープンに行うことができる. 
たとえば <em><a href="https://help.launchpad.net/Code/Review">Launchpad のコードレビュー</a></em> では, 
プログラマがローカルのブランチをサーバにある自分のレポジトリにプッシュし, 
本家の開発者にレビューとマージを要求する. ブランチを切るのに特権はいらないから, 
誰でも同じ立場で大きな変更を始めることができる. </p>
<p>Launchpad がホストする SCM である Bzr のブランチは(当然)複数の変更を含む. 
レビュアはブランチ上の各リビジョンに対してオーケーを出すことができる. 
まさにこうあってほしい作りになっている. 
ただコードレビューツールの UI がやや前時代的で悲しい. </p>
<p><em>github の pull request</em> もだいたい似たようなものだけれど, 
コードレビューの支援は LaunchPad より弱そうに見える. 
"レビュア" のような概念が薄い github のカジュアルな想定開発スタイルを反映しているのだとおもう. </p>
<p>Android で採用されている git 用のレビューツール <em><a href="http://code.google.com/p/gerrit/">Gerrit</a></em> も
似たような仕組みを持っている. コードレビュー大好きな会社が作ったツールのため UI の出来は良い. 
ただし Gerrit は Launchpad のような (github のようなと言ってもいい) 
ユーザ単位のブランチという概念はないから, 通りすがりの人間がブランチを公開することはできない. 
また組込みの障害管理ツールを持っていないため, バグとブランチの対応づけはやりにくそうに見える. </p>
<p>どれも一長一短で決定打がないため, というわけではないけれども件のプロジェクトでツールの乗り換えが行われる様子はないので, 
私は仕方なく <a href="http://www.bugzilla.org/">Bugzilla</a> で我慢している. 
しばらくはアドホックにのらりくらりと頑張りたい. </p>
<p>でも分散バージョン管理と障害追跡とまともな UI のコードレビューがくっついた, 
さいきょうのソフトウェアプロジェクト支援ツールがあったらきっと市場を制圧できるとはずなので誰かがんばってほしいです. 
あ, Wiki もつけてよね. それと...</p>
