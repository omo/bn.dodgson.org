---
title: "あるライブラリのおもいで"
date: 2011-04-04
---
<h3>あるライブラリのおもいで</h3>
<p><span class='image'><a href='http://www.amazon.co.jp/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E6%94%AF%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-%EF%BC%8D%EF%BC%8D%E5%A3%AE%E5%A4%A7%E3%81%AA%E3%83%97%E3%83%AC%E3%82%A4%E7%A9%BA%E9%96%93%E3%81%AE%E8%88%9E%E5%8F%B0%E8%A3%8F-WEB-DB-PRESS-plus/dp/4774145807%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774145807' class='bookcover'><img data:asin='4774145807' class='asin image-right' src='http://ecx.images-amazon.com/images/I/517r%2B79Ka7L.jpg'></span></a></span></p>
<p>そういえば<a data:asin='4774145807' href='http://www.amazon.co.jp/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E6%94%AF%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-%EF%BC%8D%EF%BC%8D%E5%A3%AE%E5%A4%A7%E3%81%AA%E3%83%97%E3%83%AC%E3%82%A4%E7%A9%BA%E9%96%93%E3%81%AE%E8%88%9E%E5%8F%B0%E8%A3%8F-WEB-DB-PRESS-plus/dp/4774145807%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774145807'>先に紹介した本</a>のサンプルコードは
前勤務先が開発していたライブラリを使っている. そんなのがあったなと思いだした. 
開発元の会社は私が退職したあと解散してしまい, 製品としてのライブラリもなくなってしまったようだ. 
少しはバグとりなどを手伝った身として一抹のさびしさがある. 
今は亡きこのライブラリを偲んでみたい. </p>
<p>それは C(v1.x)/C++(v2.x) で書かれたノンブロッキングスタイルの通信ライブラリで, 
<a href="http://monkey.org/~provos/libevent/">libevent</a> に類する
イベントシステムと IO を抽象化するレイヤの上に
バッファ管理, フレーミング, 多重化, 暗号化, 
圧縮, UDP ベースのストリーム実装 と hole punching を実装し, 
簡単な RPC もついていた.
そのほかにも経路の heartbeat や素朴なリマッピング, 簡易チート対策, 
高負荷な暗号化や圧縮だけを別プロセスに切り離すプロキシや
など細々とした機能もあった. 
暗号化や圧縮にはサードパーティのコードを使っていたけれど, 
ゲーム機をサポートする都合などから I/O のラッパは自分でコードを持っていた.
内製向けに Flash と Python のバージョンも書かれていた. </p>
<h4>ノンブロッキングスタイルの良さ</h4>
<p>ノンブロッキング/非同期のプログラミングスタイルはゲームと相性がよい. 
伝統的なつくりのゲームはコードの中にいわゆる "メインループ" があって, 
大ざっぱにいうと一回のループで 1 フレーム分の処理をする. 
一秒に 30 なり 60 なりのフレームを描画する必要があるから, 
1 フレームあたりに使える時間は限られる. 
だからファイルなどの出力は自然と非同期になる. 
同様に非同期通信はほとんど不可避だったし, 実際よく馴染んだ. 
キー入力を読むようにパケットを読めばいいからね.</p>
<p>サーバ側には select() などシステムコールからの通知を処理するイベントループがある. 
このループの上でタイムアウトや状態変更のバッチ化を工夫し "フレーム" に似た概念を作れば, 
サーバのコードにも普通のゲームプログラムに近いパラダイムを持ち込むことができる. 
要するにサーバのイベントループがゲームのメインループになる. 
ループの中でフレーム毎に時間を進め, イベントを処理すればいい. 
故ライブラリはこの辺にも少し工夫があった.</p>
<p>件の本ではノンブロッキングの利点に
スレッドモデルの簡素さやオーバーヘッドの少なさを挙げていた気がするけれど, 
私個人はプログラミングモデルの馴染みの良さが決定的な利点だと感じていた. 
(同様に C++ を使うのも性能以前にゲーム開発会社の人材分布や
クライアント側プログラムとの親和性が大きな利点だったとおもう.)</p>
<h4>デザインと機能</h4>
<p><span class='image'><a href='http://www.amazon.co.jp/%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A8%E3%83%B4%E3%82%A1%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E9%A7%86%E5%8B%95%E8%A8%AD%E8%A8%88-IT-Architects%E2%80%99Archive-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E5%AE%9F%E8%B7%B5-%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A8%E3%83%B4%E3%82%A1%E3%83%B3%E3%82%B9/dp/4798121967%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798121967' class='bookcover'><img data:asin='4798121967' class='asin image-right' src='http://ecx.images-amazon.com/images/I/51f7WXHJYCL.jpg'></span></a></span></p>
<p>故ライブラリ開発元での最初の仕事はこのライブラリのバグとりだった.
まずドキュメントとコードに目を通した私は... API デザインのひどさに驚いた. 
これをよしとして対価を払ってくれる顧客がいたし私の好みにもだいぶ偏りがあるから, 
ひどいというのはフェアでないかもしれない. ただ現代的なデザインではなかった. </p>
<p>一方で機能の取捨には唸った. 
API にがっかりした私はオープンソースの代替品を探していたものの
いまひとつ良い候補が見当らず, その事実が機能定義のうまさを私に知らしめた.</p>
<p>通信のレイヤでは Java の <a href="http://mina.apache.org/">MINA</a> や 
<a href="http://www.jboss.org/netty.html">Netty</a> が近い性格を持っている. 
<a href="http://think-async.com/">ASIO</a> のようにテンプレート原理主義でなく 
実行時多態で拡張しやすい C++ 実装があればあれば足がかりになったかもしれない. 
RPC は <a href="http://incubator.apache.org/thrift/">Thrift</a> はじめ色々な実装があるけれど, 
概してノンブロッキングに優しくなかったし, 
チート対策をはじめとするゲーム固有の細々した機能,   
コードサイズやマルチプラットホームなど, 他にない特徴はことさら代替が難しかった.</p>
<p>オンラインゲームの通信に伴う問題と解決方法を, 
ライブラリの書き手はたしかに理解していた. 
ただそれをライブラリに符号化する方法がまずいように見えた. 
実際, よりアプリケーション層に近いコンポーネントの再利用は
複雑さの bankruptcy によりほとんど失敗していた. </p>
<p>一方の私は C++ のコードがどうあるべきか(相対的には)知っていると感じていたけれど, 
要素技術たるネットワークスタックの難しさをわかっていなかったし, 
オンラインゲームの領域に至ってはまったく無知だった. 
自分がそのライブラリに口を挟み書き直したところで
ピントのずれた自己満足のゴミにになるのは間違いなく, 何もできなかった. 
語りの言葉を欠く書き手に苛立ちながら, 
語るべき物を持たない身にはずっと後ろ暗さを感じていた.</p>
<h4>My Favorite Vaporware</h4>
<p>ネットワークスタック, ゲーム, コードの再利用性や抽象, 
それぞれをきちんと理解した誰かが書けば, この分野の良いライブラリができるだろう.
そういうものがあるなら触ってみたい気はする. </p>
<p>昨今隆盛にあるソーシャルゲームなるゲームのバックエンドは, 
多くが単なるウェブのシステムに見える. (ちがったらごめんなさい.) 
でもたとえばコンシューマゲームの企業が参入して競争がおき, 
その果てにリアルタイム性の高いゲームが流行ることになれば, 
おそらくもう少し面倒なコードも書かざるをえなくなる. 
そんなコードのためのライブラリが求められる日は来る...かもしれない.</p>
<p>いつかそうした仕事(趣味も可)をされる皆様におかれましてはぜひ 
EventMachine, Tornado, Node.js, Netty といったノンブロッキング IO の上で
サーバを書いていただき, クライアントは iOS, あんどろ, Flash から
ブラウザまでサポートされた上でクロス言語の RPC を載せ, <del>野次馬</del> 明るい日本の未来のため
ライブラリにパッケージングしオープンソースでリリースしていただければと思います. </p>
<p>あらあらかしこ... あとできれば非同期 ORM もほしいです.</p>
