---
title: "2hop-sibling-chained な上司から肯定的説得についてのレクチャーを受ける"
date: 2004-04-12
---
<p>近況</p><p>2hop-sibling-chained な上司から肯定的説得についてのレクチャーを受ける. 主旨はおおよそ以下のとおり: 働いていると示すことに注力せよ. 具体的には "計画/実行/記録/修正" の枠組みに従い反復的に行動しなさいという話. ソフトウェア・プロセスの意義は計画の精度と信憑性を高めることにある. 彼は語気を強める. しかし私達のまわりでは誰ひとりそんなことををしていませんよ. そう反撃する同僚も私達の誰かが正しいと思っている様子はなかった. レクチャーどおりにたてたはずの工程概算を前に, 私はやはり途方にくれた. </p><p></p><p>依存関係の可視化</p><p> 並列化が工程管理におけるもう一つの基本だと上司は言う. 依存関係を明示し, 最小化すること. 白馬の王子がわたしを救えるように. <a href="http://office.microsoft.com/project/">Microsoft Project</a> はそんな並列化, pipelining を最大化するべく設計されている. 全てが順調に進むことを仮定しているこのソフトウェアは表の更新が面倒なので, 私は Excel や <a href="http://www.openoffice.org/product/calc.html">OpenOffice の Calc</a> を使っている. ただ, 表を眺めていても並列化可能性はわからない. そこで <a href="http://www.graphviz.org/">graphviz</a> を使い依存関係を可視化してみた. CSV で出力した表を適当なスクリプトで graphviz の dot 形式に変換する. </p><p></p><p> <img src='/bn/images/20040412_0.png' class='image'> </p><p></p><p> たとえばこれはあるあたたかな朝のこと. 朝食と洗濯とメールチェックとふとんあげは (十分な資源があれば) 並列化可能であることが一目でわかる. みだしなみの整理とお茶淹れも. 大家族で迎える一日の慌しい始まりを想像しよう. 同様に, 凄腕の火消しが投入され次々に作業の片付いていくプロジェクトを想像しよう. </p><p>そんな日々に夢を馳せよう.</p><p></p><p>graphviz のこまかい話</p><p>graphvis で絵を出力するには, 付属の dot というコマンドラインツールを使うのが一番簡単. 引数にグラフを記述した dot ファイルを渡す: "dot -Tpng -oat-morning.png at-morning.dot".</p><p>dot 形式については <a href="http://www.research.att.com/sw/tools/graphviz/dotguide.pdf">dot user's guide(PDF)</a> を参照のこと. 末尾に朝の例を示した. 以下 tips:</p><ol><p> <li>各ノードのラベル("wakeup"のような文字列)には, 何も指定しないとノードの ID が使われる. ただし ID は文法上の制約で使える文字が限られているため, ラベルの指定は "label" 指示子で明示的に行った方がいい. ID にはノードの通し番号(スクリプトで自動的に与える)を使うのが無難.</li></p><p> <li>複数のノードを一つにまとめる cluster という機能がある. これを作業項目のグループを現すのに使うことができる. その際にはグループをもたない単一のノードにも自分だけを含む cluster をつくること. そうしないと意図どおりのレイアウトがされない.</li></p><p> <li>作業項目の所要時間も可視化したい. 私は height 属性を用いた. height のような数値属性は適当にスケーリングできるようスクリプトに細工をしておくと便利. グラフの大きさによって, その倍率を適当に調整すると見栄えがいい.</li></p><p> <li>ラベルに日本語は使えない.</li></p></ol><p></p><pre><p>digraph G {</p><p>  </p><p>  size="5,5";</p><p>  </p><p>  subgraph cluster_wakeup {</p><p>    0[label="wakeup",shape=box,height=0.652174,style=filled,fillcolor=lightgray];</p><p>  }</p><p>  </p><p>  subgraph cluster_make_bed {</p><p>    1[label="make-bed",shape=box,height=0.217391,style=filled,fillcolor=lightgray];</p><p>    1 -&gt; 0;</p><p>  }</p><p>  </p><p>  subgraph cluster_breakfast {</p><p>    2[label="breakfast/make",shape=box,height=0.652174,style=filled,fillcolor=lightgray];</p><p>    2 -&gt; 0;</p><p>    3[label="breakfast/eat",shape=box,height=0.434783,style=filled,fillcolor=lightgray];</p><p>    3 -&gt; 2;</p><p>    4[label="breakfast/clean",shape=box,height=0.217391,style=filled,fillcolor=lightgray];</p><p>    4 -&gt; 3;</p><p>  }</p><p>  </p><p>  subgraph cluster_washing {</p><p>    5[label="washing/setup",shape=box,height=0.434783,style=filled,fillcolor=lightgray];</p><p>    5 -&gt; 0;</p><p>    6[label="washing/hang",shape=box,height=0.652174,style=filled,fillcolor=lightgray];</p><p>    6 -&gt; 5;</p><p>  }</p><p>  </p><p>  subgraph cluster_fix_appearance {</p><p>    7[label="fix-appearance",shape=box,height=0.652174,style=filled,fillcolor=lightgray];</p><p>    7 -&gt; 4;</p><p>    7 -&gt; 6;</p><p>  }</p><p>  </p><p>  subgraph cluster_tea {</p><p>    8[label="tea/setup",shape=box,height=0.217391,style=filled,fillcolor=lightgray];</p><p>    8 -&gt; 0;</p><p>    9[label="tea/take",shape=box,height=0.217391,style=filled,fillcolor=lightgray];</p><p>    9 -&gt; 4;</p><p>    9 -&gt; 6;</p><p>    9 -&gt; 7;</p><p>    9 -&gt; 8;</p><p>  }</p><p>  </p><p>  subgraph cluster_check_e_mail {</p><p>    10[label="check-e-mail",shape=box,height=0.652174,style=filled,fillcolor=lightgray];</p><p>    10 -&gt; 0;</p><p>  }</p><p>}</p><p></p></pre>
