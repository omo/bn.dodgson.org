---
title: "  情報産業それ自身が必ずしも情報化の恩恵に与しているとは限らない"
date: 2004-12-13
---
<p>近況</p><p> <img src='/bn/images/20041213_0.jpg' class='image-right'> 情報産業それ自身が必ずしも情報化の恩恵に与しているとは限らない. 使いにくい社内のウェブシステムに不条理を感じながらそう愚痴る. 経費削減の圧力を考えるとこれが改善されることはなかろう. アルゴリズムの改善ではなく peephole optimization を重ねる経営陣は, O 記法の神話を信じない pragmatic engineer なのかもしれない.</p><p>目には目を. 局所最適化には局所最適化を. 使いにくいウェブには bookmarklet を. ということで, 書くことにした. たとえば担当分のバグ情報を BTS から自分のタスク管理用 Wiki に転載する bookmarklet. よくやる作業の手間が省けるのは気分がいい. 他にも勤怠情報システムの入力を自動化する, なんてのも目論むところ. </p><p> 書いてみると案外簡単な bookmarklet, <a href="http://bookmarklet.daa.jp/">専門のサイト</a> ができるなど普及の兆しは見えるものの こういう局所用途に使う人はあまり目にしない. ブラックボックスとして使う人が多いのだろうか. なんとなく寂しいので, bookmarklet の簡単な入門を試みる. 暇な人はためしてみてください.</p><p></p><p>Bookmarklet</p><p>bookmarklet とは "javascript:" から始まる JavaScript のコードを URI として bookmark に 登録し, 好きなタイミングで呼びだすトリックのことをいう. たとえば</p><pre><p> alert('Hello World');</p></pre><p></p><p> というコードを bookmark に登録してみよう. : <a href="javascript:alert('Hello World')">Hello World</a>.  登録したエントリをブックマークから選ぶ. スクリプトが呼ばれる. それだけ. スクリプトは "呼ばれたページ" のコンテクストで動くため, 一見セキュリティ上の制約で難しそうなことができる. 自ら XSS するかんじ.</p><p></p><p>典型的な Bookmarklet : 表示しているページの情報をサーバに送る</p><p>もっとも典型的な bookmarklet は, ページ内の情報を使って新しい window を開くものだろう: <a href="javascript:window.open('http://www.dodgson.org/omo/marklet/show_params.cgi?title=' + document.title);undefined" >パラメタにタイトルを渡して window を開く</a></p><pre><p>  window.open('http://www.dodgson.org/omo/marklet/show_params.cgi?title=' + document.title);undefined;</p></pre><p></p><p> CGI の <a href="show_params.cgi.txt">show_params.cgi</a> は単にパラメタを一覧表示する. デバッグの時には便利かもしれない.</p><p>さて, URL に閲覧中ページの情報を埋めこんでサーバに送るこのテクニックは bookmarklet の基本中の基本と言える. MovableType などの blog tool が用意する記事投稿 bookmarlet や bloglines の "このページを講読する" bookmarklet はまさにこれである.</p><p>なお, javascript の URI は評価結果が HTML として描画される. たとえば以下のような URI を試してみよう: <a href="javascript:'&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;'">HTML を返すコード</a></p><pre><p>  javascript:'&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;'</p></pre><p></p><p> 一つ前のサンプルでは, 評価結果を undefined とすることでこれを防いでいる.</p><p></p><p>変数を使う</p><p>少し複雑なことをしようとすると, コードの中で変数を使いたくなる. たとえば for 文では "i" をつかいたい. bookmarklet は他人の書いたページのコンテクストで実行されるため, 変数名の重複に気をつけねばならない. そのためには以下のようなイディオムを使う. <a href="javascript:(function() { alert('Hello'); })()">function object のイディオム</a></p><pre><p>  (function() { alert('Hello'); })()</p></pre><p></p><p> 匿名の function object を作って, すぐにそれを評価する, ということらしい. (ECMAScript の仕様書を眺めてもなぜこれが legal な記述なのかわからないけど気にしない...) 実際に変数を使った例 : <a href="javascript:(function() { var imgs = document.getElementsByTagName('img'); for(var i=0; i&lt; imgs.length; i++) { imgs[i].style.visibility = 'hidden'; } })()">ページ内の画像を全て非表示に</a></p><pre><p>  (function() { var imgs = document.getElementsByTagName('img'); for(var i=0; i&lt; imgs.length; i++) { imgs[i].style.visibility = 'hidden'; } })()</p></pre><p></p><p>文字列を与える: テキストボックスの表示, 選択範囲の取得</p><p>検索ダイアログのようなことを bookmarklet で実現するためには prompt() 関数を使う : <a href="javascript:alert('[' + prompt('Enter Text') + '] is entered')">入力された文字列を表示</a></p><pre><p>  alert('[' + prompt('Enter Text') + '] is entered');</p></pre><p></p><p> テキストボックスよりよく使うのは選択範囲にある文字列の取得だろう. これは IE と Mozilla で方法が異る. Mozilla は以下のとおり: <a href="javascript:alert(window.getSelection())">選択範囲の文字列を表示</a></p><pre><p>  alert(window.getSelection());</p></pre><a href="javascript:alert(window.selection.createRange().text)">IE の場合</a><pre><p>  alert(window.selection.createRange().text);</p></pre><p></p><p> 世間の bookmarklet は多くの場合がんばって <a href="javascript:alert(window.selection ? window.selection.createRange().text : window.getSelection())">両方対応しているようだ.</a></p><pre><p>  alert(window.selection ? window.selection.createRange().text : window.getSelection());</p></pre><p></p><p> JavaSciprt プログラマの苦労が伺える.</p><p></p><p>新しい Window に好きな内容を与える</p><p>テキストボックスしか表示できない prompt() は UI として制約が大きすぎる. 自分で UI を作りたい時はもう少し工夫が必要になる. 自分で新しい window を開いて, そこに表示したい HTML の文字列を与ればいい :  <a href="javascript:(function() { d = window.open('').document; d.open(); d.write('&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;'); d.close(); })();">Hello New Window</a></p><pre><p>   (function() { d = window.open('').document; d.open(); d.write('&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;'); d.close(); })();</p></pre><p></p><p> この方法の強力な点は, 新しい window が親の window と同じ URI を持っていることである. これはスクリプトが対象コンテンツと同じドメインで動き, セキュリティ上の制約を受けないことを意味する. 遠慮なく親 window の DOM にアクセスしよう. phisher にとっては羨しい話に違いない.</p><p></p><p>一行野郎からの脱出 : 外部のスクリプトを読み込む</p><p>基本的に one-liner である bookmarklet は, 長いコードを書こうとすると著しくメンテナンス性が下がる. 一行に詰め込みきれず挫けるのは惜しい. 外部にあるスクリプトを読み込む以下のテクニックを使うと, この制約を克服できる : <a href="javascript:(function() { s = document.createElement('script'); s.setAttribute('src', 'http://www.dodgson.org/omo/marklet/hello.js'); document.documentElement.appendChild(s); })();">Hello External Script</a></p><pre><p>  (function() { s = document.createElement('script'); s.setAttribute('src', 'http://www.dodgson.org/omo/marklet/hello.js'); document.documentElement.appendChild(s); })();</p></pre><p></p><p> &lt;script src='<a href="http://www.dodgson.org/omo/marklet/hello.js">http://www.dodgson.org/omo/marklet/hello.js</a>'/&gt; という element を新しく作って document に追加するわけ. 追加するタイミングで element は評価され, スクリプトが読み込まれる. </p><p>複雑な bookmarklet を公開している人にとっては, コードの可読性が上がるだけでなく常に最新版を配布できるというメリットもある. またサーバサイドで動的に生成したコンテンツを bookmarklet から利用できるのは応用範囲が広い． </p><p>なお, このテクニックにはウェブサーバが必要になる. localhost に起動しておくと便利.</p><p></p><p>文字コードの問題</p><p>URL に日本語を埋め込む場合, エンコーディングは現在表示しているページと同じものか, 特定のエンコーディングになる. (ブラウザに依存する.) ウェブサイトによってはエンコーディングを仮定していることがあり, bookmarklet からそういうページを開こうとすると文字化けがおこる. (スクリプトからコンテンツの文字エンコーディングを知ることはできないため, Google のように URL のパラメタにエンコードを指定する場合でも問題は残る.)</p><p>この問題はクライアント側だけでは解決できない. CGI で URL の文字コードを適当に(以下のサンプルでは Shift_JIS に)変換, リダイレクトすることで回避してみた.</p><p>例を示そう: <a href="javascript:(function() { window.open('http://dodgson.org/omo/marklet/convurl.cgi?http://www.google.com/search?ie=Shift_JIS&q=' + window.getSelection()); })()">選択範囲を google で検索する</a> (<a href="javascript:(function() { window.open('http://www.google.com/search?ie=Shift_JIS&q=' + window.getSelection()); })()">変換なし</a>)</p><pre><p> (function() { window.open('http://dodgson.org/omo/marklet/convurl.cgi?http://www.google.com/search?ie=Shift_JIS&q=' + window.getSelection()); })()</p></pre><p>CGI のソースはこれ: <a href="convurl.cgi.txt">convurl.cgi</a>. NKF を使っても, 最近増えてきた UTF-8 のページには対応できない...</p><p></p><p>応用編</p><p>これでだいたい要素技術が揃った. あとは実際にコードを書いてみよう. 長めのサンプルを書いてみた. <a href="javascript:(function() { s = document.createElement('script'); s.setAttribute('src', 'http://www.dodgson.org/omo/marklet/list_about.js'); document.documentElement.appendChild(s); })();">はてなダイアリでコメントした人の about 一覧を表示する</a>. (Mozilla 系のみ対応. ちょっと遅いので, 適度にコメントの多いページ, ex. <a href="http://d.hatena.ne.jp/ryoko/">ryoko 日記</a> で試してみてください.) 本体は <a href="http://www.dodgson.org/omo/marklet/list_about.js">list_about.js</a>. サーバサイドの支援は使っていない. かわりにセキュリティの境界をすりぬけたしるしとして <a href="http://developer.apple.com/internet/webcontent/xmlhttpreq.html">XMLHttpRequest</a> を試してみた. 実際に書いてみると, 長い JavaScript のコードも one-liner でないならそう苦労しないことがわかる. </p><p></p><p>Glue としての Bookmarklet</p><p>使いにくいシステムとフロントエンドの繋ぎ目にある層を glue と呼ぶ. UNIX のシェルスクリプトはその典型. ウェブでは CGI 類が glue の役割を果たしてきた. ただ, CGI を glue として使うのは面倒が多い. 大半のサイト は Web ブラウザという高機能クライアントと強く結合しているため, その繋ぎ目に glue をねじこもうとすると難儀する.</p><p>SOAP や REST のような web service の仕組みはサーバ側でこの結合を緩める. web service の恩恵をうけた glue の例はたとえば Amazon WS を使ったオンライン書店. RSS も同じようにサーバ側でブラウザヘの coupling を緩める. 簡単なスキーマの XML でコンテンツを公開することによってサバとブラウザの中間でのコンテンツ加工はしやすくなる.</p><p>頑固者のサーバが相手の場合は client 側に細工が必要だ. IE コンポーネントを使った特定用途専用ブラウザ(<a href="http://www.airclub.org/">airWeb</a>, <a href="http://www.nitoyon.com/program/mb/">mixi ブラウザ</a>など) や Mozilla の extension はこのアププローチ. ブラウザの助力を得られるこのアプローチは, 強力だが開発が面倒で気軽に作れない. 機能が制限されるかわりに開発やインストールの簡単な bookmarklet は, このクライアント側 glue の簡易版だと言える. 細かいことは気にせず, トライアンドエラーでさっと書こう.</p><p></p><p>参考サイト</p><ul><p>  <li><a href="http://www.gazingus.org/html/Anatomy_of_a_Bookmarklet.html">Anatomy of a Bookmarklet</a></p><p>  <li><a href="http://bookmarklet.daa.jp/">JavaScript::Bookmarklet</a></li></p><p>  <li><a href="http://www.mozilla.org/docs/dom/domref/">Gecko DOM Reference</a></li></p><p>  <li><a href="http://javascript.about.com/library/blsource.htm">View Source Bookmarklet</a></li></p></ul>
