---
title: "近況と免責事項"
date: 2007-05-14
---
<h3>近況と免責事項</h3>
<p>今月から 
<a href="http://www.ce-lab.net/">Community Engine</a> という会社で働いている. 
ドジ研つながりな人がおり, そののつてでまぜてもらった. 
私はこれまで(もっぱら会社や上司への愚痴を書くために)匿名でやってきたけれど, 
今回は <a href="http://www.ce-lab.net/ringo/">ボス</a> に身元が割れている. 
一番面倒な相手(雇用主+株主)に正体をつかまれている以上, その他の読者から身を隠しても仕方ない. 
どうせなら会社での暮らしをもっと書くことにしよう. </p>
<p>真面目な会社員であるところの私は仕事をしていると色々思うことがある. 
でもこれまでは所在を隠すために頑張って文脈を切り離す必要があった. 
切り離すのに挫けて書けなかったことも多い. 
そういう苦労がないのはいいかもしらん. 愚痴を書けないのは寂しいけれど. </p>
<p>忘れないうちに免責事項: 
このサイトに書かれた主張そのほかは私個人のものであり, 
私の所属する組織や団体の意見を反映するものではありません. </p>
<h3>近況つづき</h3>
<p>会社に入ってしばらくはヒマなもので, 
他所のプロジェクトのミーティングを覗いたりしている. 
このあいだは社内で作っている rails アプリのコードをレビューする会に参加した. 
教科書以外の rails コードを見るのははじめてだ. ちょっと感動. </p>
<p>コードで印象的だったのは, Object#send に類するリフレクション機能が
けっこう頻繁に使われていたこと. (eval も一箇所あったがダメだしされていた.) 
私の中では リフレクション = プログラミングのダークサイド なので, 
そういうコードを見ると腰が引ける. 
convention over configuration の流儀に従うと, 
convention から名前を類推するコードが多くなるのだという. そんなものかも知れない. </p>
<p>一番参ったのは ActiveSupport の <a href="http://api.rubyonrails.com/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000434">Infections::constantize()</a>. 
文字列からクラスを作るメソッドが String に定義されている. ひどい... 
具体的な使われ方としては, たとえば仮にハンバーガー屋の業務システムがあるとして, </p>
<pre>new_burger = (filling + "Burger").constantize.new</pre>
<p>という風に使っている. 
filling はどこかからやってくるパラメタ. "Cheese" など具の名前が入っている. 
もちろんこんなコードがあちこちに散在しているわけではない. 
各 Burger クラスは AbstractBurger (まずそう...) を継承し, 
インスタンス化は make_burger() のような factory method に局所化されている. </p>
<p>それにしても不穏だ. このコードが不穏というより, 
Infections#constantize() が不穏なのだと思う. 
私の脳内には, 
文字列引数 -&gt; リフレクション -&gt; ダークサイド 
というチェック機構がある. constantize() は, self に文字列を隠して
この脳内チェックを切り抜けようとする. それが怖い. 
<a href="http://local.joelonsoftware.com/mediawiki/index.php/%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E9%96%93%E9%81%95%E3%81%A3%E3%81%A6%E8%A6%8B%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">間違ったコードは間違って見えるようにする</a> 
の原則に反し, その簡潔な名前はむしろよく使えと促す. 
(<a href="http://cvs.m17n.org/~akr/pub/rubykaigi2006-06-10.pdf">使いやすいライブラリAPIデザイン(PDF)|http://ja.reddit.com/info/7n1a/comments</a> 参照.) 
少し前, Apple のデザインを "they look more perfect than they really are." と評する 
<a href="http://www.tom-carden.co.uk/2007/05/02/cognitive-dissonance-is-bad-for-design/">記事</a> があった. 
rails の API もそれに似たところがある. 
本来目につくべき粗, ロジックの複雑さを隠してしまう. </p>
<p>ただ, そもそも ruby でのリフレクションはどれだけダークなんだろう. いまいち確信がない. 
リフレクションが危険だと感じるのは型システムの支援を受けられなくなるからだが, 
duck typing な言語にはそもそも型チェックがない. 
JavaScript のオブジェクトに至っては単なるハッシュ表だ. リフレクションも何もない. 
この動的な世界で, コンパイラへの期待から身に付けた習慣を
どれだけひきずれるのか. 
いっそ String#burgerize() を実装してしまうのが dynamic/rails way なのかもしれない. </p>
<h3>API のユーザビリティ・テスト (が欲しい)</h3>
<p>API の良し悪しで思いだしたこと. </p>
<p>このごろ友達が API 設計に凝っているらしく, 
本屋に行くと "良い API を作るための本はないかなあ" という. 
"GoF とか PoEAA は?" とやる気のない答えをしたら酷寒であしらわれた. 
PoEAA を読んでないのがバレたかと思ったが違うらしい. 
彼が探しているのは, API のユーザビリティテストをする方法や, 
その結果をふまえたデザインの手法だという. たしかにそういう話は見たことがない. </p>
<p>良い API の設計に関する言い伝えは多い. 
しかし API の良さを定量的に扱う方法は多くない. 
私が知っているのは依存関係から複雑さを測る方法くらい. 
UI の議論をすると, 最後はいつもユーザビリティテストの話に行き着く. 
このテストはそれなりに定量的な手法と言える. 
API の設計に関する議論が同じように進まないなんて, 考えてみれば不思議なものだ. 
API や, より広くソフトウェアの設計が Art や Cult の世界に留まっているのは, 
プログラマに残る未熟さのあらわれかもしれない. </p>
<p>テスト・ファーストや設計レビューといったアドホックな兆しはある. 
この路線を推し進め, 
感情的にならず統計的な方法で API の良し悪しを議論できたらいいと思う. 
やっぱりユーザビリティ・テストだな. 
この API でコードを書いてもらえませんか. 
道ゆくプログラマをつかまえて尋ねる. ノート PC を手渡す. 
コード. そして実行. 例外が発生し, テストは fail する. 
私はカメラから画面を覗き, 悩んだ末に渡された引数の null を前にうなだれる. 
その引数が null なのはなぜかと司会役が訊く. 
Object 型だったから, 彼女は答える. なんでもいいのかなって. 
違うんだ. 私はつぶやく. あなたが悪いんじゃないんです. 悪いのはこの API です. 
司会役は申しわけなさそうに告げ, セッションが終わる. ご協力ありがとうございました. </p>
<p>あ, 想定ペルソナは "明るく可愛い課のアイドル(22). レガシー API を盾にとった上司のセクハラが悩み" といったところでよろしく. </p>
<h4>追記 : リファラから</h4>
<p><a href="http://subtech.g.hatena.ne.jp/secondlife/20070516/1179294390">Ruby のリフレクションはダークサイドか</a> より</p>
<blockquote><p>IDEによる支援がほとんど無い Ruby なら一度ダークサイドに落ちてみるのもどうでしょうか:D</p>
</blockquote>
<p>とのこと. この一言を待っていたかも! 
普段のやっつけスクリプトだとそもそもリフレクションの出番を思いうかないから, 
フレームワークっぽいものを作りたいなあ. </p>
