---
title: "最近もらった本: インターフェイス指向設計"
date: 2008-07-21
---
<h3>最近もらった本: <a data:asin='4873113660' href='http://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%82%A4%E3%82%B9%E6%8C%87%E5%90%91%E8%A8%AD%E8%A8%88-%E2%80%95%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E6%89%8B%E6%B3%95%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E8%A8%AD%E8%A8%88%E3%81%AE%E5%AE%9F%E8%B7%B5-Ken-Pugh/dp/4873113660%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113660'>インターフェイス指向設計</a></h3>
<p><span class='image'><a href='http://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%82%A4%E3%82%B9%E6%8C%87%E5%90%91%E8%A8%AD%E8%A8%88-%E2%80%95%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E6%89%8B%E6%B3%95%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E8%A8%AD%E8%A8%88%E3%81%AE%E5%AE%9F%E8%B7%B5-Ken-Pugh/dp/4873113660%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113660' class='bookcover'><img data:asin='4873113660' class='asin image-right' src='http://ecx.images-amazon.com/images/I/51b8oJcFWdL.jpg'></span></a></span></p>
<p>最近でもないですが頂きました. ありがとうございます &gt; 関係者の方. 
多忙にかまけて感想を書くのが遅れてしまいました. </p>
<p>遅れた理由はもう一つあって, 私はこの本の主張があまりピンとこなかった. 
でも貰った本のことを単にイマイチだったと書くのも社会人としてどうかなー, 
などとよたよたするうちに月日は流れ... </p>
<p>嘘や間違いはない. 
けれどアジャイルなオブジェクト指向設計という視点でみると, 
いまいち relevance を欠く気がする. 
この本を読んでまずい設計が良くなるのを期待できない自分がいる. </p>
<p>何でピンとこないのか, しばらく考えていた. 
どうも "インターフェイス" を中心に据えるのがまずいんじゃなかろうか. 
オブジェクト指向の設計を議論する上で, インターフェイスはツールの一つに過ぎない. 
"インターフェイス指向設計" という切り口は, 極端に言えば 
"クッキー指向ウェブアプリケーション" とか "バイリニアフィルタ指向グラフィクス" 
みたいな違和感がある. 
とても強力なツールだし, これなしに仕事をするのは辛い. けれど核じゃない. 
だから "良いインターフェイスとは..." と話を進めるとぎこちなくなる. 
(逆に要素技術としてのインターフェイスを概観するには良い本かもしれない.)</p>
<p>私は継承が嫌いだ. 殺意に近い憎しみを抱いている. 
この世から継承を撲滅するための NPO があったら喜んで参加するし, 
駅前で "すみません継承の勉強をしてるんですが..." と話しかけられたら間違いなく釣られると思う. 
だからこの本を読むまでは, インターフェイスを頼りに良い設計を説く
うまい方法がないかと, 私自身も考えていた. 
継承の天敵としてのインターフェイス (とコンポジション) に強い期待があった. 
けれど, どうもこの路線は先が長くない. 
著者の Ken Pugh が身を持って示してくれた. 意図してないと思うけれども. </p>
<p>良い設計にインターフェイスが現れるのも, 悪い設計に継承が現れるのも, 
何かの症状や結果に過ぎない. 肝は他にある. 
では何が肝なのか. それが上手く説明できれば苦労はない... 
たぶん, オブジェクト同士の &lt;役割分担&gt; や &lt;協調&gt; のありかたを中心に
考える必要があるのだと思う. この語彙はあまり的確じゃないかもしれない. 
でも話の都合でそう呼んでおく.</p>
<h4>むかしながらのオブジェクト</h4>
<p><span class='image'><a href='http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E5%85%A5%E9%96%80-%E7%AC%AC2%E7%89%88-%E5%8E%9F%E5%89%87%E3%83%BB%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88-Architect%E2%80%99Archive-%E3%82%AF%E3%83%A9%E3%82%B7%E3%83%83%E3%82%AF%E3%83%A2%E3%83%80%E3%83%B3%E3%83%BB%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/dp/4798111112%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798111112' class='bookcover'><img data:asin='4798111112' class='asin image-right' src='http://ecx.images-amazon.com/images/I/51Y4DWH4N3L.jpg'></span></a></span></p>
<p>クラスは, 古典的には "モジュール" と呼ばれていた概念を焼き直して説明されてきた. 
"一つのことを上手くやる" とかね. 
もう少しフォーマルな切り口は ADT. 
今や古典である <a data:asin='489100455X' href='http://www.amazon.co.jp/CODE-COMPLETE-%E7%AC%AC2%E7%89%88-%E3%82%B9%E3%83%86%E3%82%A3%E3%83%BC%E3%83%96-%E3%83%9E%E3%82%B3%E3%83%8D%E3%83%AB/dp/489100455X%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D489100455X'>CODE COMPLETE</a> や 
<a data:asin='4798111112' href='http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E5%85%A5%E9%96%80-%E7%AC%AC2%E7%89%88-%E5%8E%9F%E5%89%87%E3%83%BB%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88-Architect%E2%80%99Archive-%E3%82%AF%E3%83%A9%E3%82%B7%E3%83%83%E3%82%AF%E3%83%A2%E3%83%80%E3%83%B3%E3%83%BB%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/dp/4798111112%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798111112'>OOSC</a> は, だいたいこれに則っている. </p>
<p>どちらも暗黙の前提がある: クラスは自己完結している. 
あるいは, 依存があるにせよなるべく自己完結しているべきだ. 
もちろん ADT の理論そのものにこうした前提はない. 
けれど, そこから先の議論はいつも単一のクラスの善し悪しに焦点を置いている. 
古典にあらわれる指標は, クラスひとつの設計を評価するものが大半だ. 協調の影は薄い. </p>
<p>クラスを(再)利用する &lt;利用者&gt; と, それを提供する &lt;実装者=読者&gt;.  
こうした立場の断絶が先の流れを助長する. 
利用者に公開されるオブジェクト (おそらく facade) は, 
利便性のために自己完結しているかもしれない. 
けれど実際の価値ある複雑な仕事は, その多くを複数のオブジェクトが担っている. 
利用者からは隠されているだけだ. 
困ったことに, なぜか複雑さは教科書の読者からも隠されてしまう. 
それがまさに知りたいことなのに! 実装の詳細というには話がでかすぎる. </p>
<p>こうして古い流儀では, 
一人の利用者のために一つのクラスやインターフェイスを仕上げることばかり気にして, 
裏にある協調のありかたをおざなりにしている. これじゃ片手落ちだ. 
"高凝集で疎結合なのがいい" というけれど, それをどう実現するかが知りたいんだよ. 
"インターフェイス指向設計" に不満があるのは, 
新しい書籍の割にこのへんが無自覚だからだなあ. きっと... </p>
<p>実際のソフトウェアでは, 複数のオブジェクトが協調して仕事を進めることになる. 
だからどう仕事を分担し, 協調して振る舞うべきなのかを考えないと, 良い抽象をつくることはできない. 
そのためには複数の立場から問題を眺める必要がある. 
ある視点からは隠された実装の詳細には, 別の視点にとっての抽象の核が潜んでいる. 
この複眼的な視点で設計するソフトウェアはどんな姿になるのだろうか. </p>
<h4>いまどきのオブジェクト (はこうあって欲しい)</h4>
<p><span class='image'><a href='http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3-Object-Oriented-SELECTION-%E3%83%AC%E3%83%99%E3%83%83%E3%82%AB%E3%83%BB%E3%83%AF%E3%83%BC%E3%83%95%E3%82%B9%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF/dp/4798109037%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798109037' class='bookcover'><img data:asin='4798109037' class='asin image-right' src='http://ecx.images-amazon.com/images/I/31fUI6yM-0L.jpg'></span></a></span></p>
<p>そんな疑問に答えるのが, 多くの場合 agile を名に冠する, 
いまどきのオブジェクト指向設計/プログラミングなのだと私は考えている. </p>
<p>"<a data:asin='4797311126' href='http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF-%E3%82%AC%E3%83%B3%E3%83%9E/dp/4797311126%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797311126'>デザインパターン</a>" は, 
複数のオブジェクトが協調して仕事をすることに重きを置いた教科書のひとつだ. 
ただ, 協調の姿がどうあるべきかという原則に関する議論は少ない. 
(それこそ例の "移譲を使え" くらい.) かわりに具体的なパターンが列挙されている. 
よりモダンな応用に "<a data:asin='4822282384' href='http://www.amazon.co.jp/%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E6%8C%87%E5%90%91%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80%7E%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A8%E3%82%A2%E8%A8%AD%E8%A8%88%E3%82%92%E6%94%B9%E5%96%84%E3%81%99%E3%82%8B27%E3%81%AE%E4%BD%9C%E6%B3%95-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%82%B1%E3%83%AA%E3%83%BC%E3%82%A8%E3%83%96%E3%82%B9%E3%82%AD%E3%83%BC/dp/4822282384%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822282384'>パターン指向リファクタリング</a>" がある. </p>
<p>"<a data:asin='4798109037' href='http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3-Object-Oriented-SELECTION-%E3%83%AC%E3%83%99%E3%83%83%E3%82%AB%E3%83%BB%E3%83%AF%E3%83%BC%E3%83%95%E3%82%B9%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF/dp/4798109037%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798109037'>オブジェクトデザイン</a>" は, 
責務や役割, 協調を中心に置いて設計の原則を議論している. 
これは私の感覚にとても近くて, 読みながらなるほどと思うことが多かった. 
ただいわゆる上流工程テイストが強く, 話も抽象的なので割と眠い. 
もう少しコードの言葉を話してくれれば良いのにね. </p>
<p><span class='image'><a href='http://www.amazon.co.jp/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E5%A5%A5%E7%BE%A9-%E7%AC%AC2%E7%89%88-%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E9%96%8B%E7%99%BA%E3%81%AE%E7%A5%9E%E9%AB%84%E3%81%A8%E5%8C%A0%E3%81%AE%E6%8A%80-%E3%83%AD%E3%83%90%E3%83%BC%E3%83%88%E3%83%BBC%E3%83%BB%E3%83%9E%E3%83%BC%E3%83%81%E3%83%B3/dp/4797347783%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797347783' class='bookcover'><img data:asin='4797347783' class='asin image-right' src='http://ecx.images-amazon.com/images/I/51-dAD2L2gL.jpg'></span></a></span></p>
<p>"<a data:asin='4797347783' href='http://www.amazon.co.jp/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AE%E5%A5%A5%E7%BE%A9-%E7%AC%AC2%E7%89%88-%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E9%96%8B%E7%99%BA%E3%81%AE%E7%A5%9E%E9%AB%84%E3%81%A8%E5%8C%A0%E3%81%AE%E6%8A%80-%E3%83%AD%E3%83%90%E3%83%BC%E3%83%88%E3%83%BBC%E3%83%BB%E3%83%9E%E3%83%BC%E3%83%81%E3%83%B3/dp/4797347783%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797347783'>アジャイルソフトウェア開発の奥義</a>" に示されている設計原則には, 
役割分担と協調という前提があるように見える. (本の中でそれを強調することはない.) 
ソフトウェアを変更するときにようやく分担すべき責務がみつかるとするこの本の主張は, 
"<a data:asin='4894712288' href='http://www.amazon.co.jp/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E2%80%95%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E4%BD%93%E8%B3%AA%E6%94%B9%E5%96%84%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Object-Technology-Series-%E3%83%95%E3%82%A1%E3%82%A6%E3%83%A9%E3%83%BC/dp/4894712288%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4894712288'>リファクタリング</a>" の流れを汲んでいる. いまどき感がある.  
"オブジェクトデザイン" も設計は反復的なプロセスだと言ってはいるものの, 
書いてみなければわからないというぶっちゃけた態度を取るには至っていない. </p>
<p>変更を前提とした開発様式の中で, 
いかにオブジェクトを協調させ役割を果たしていくか. 
そのための抽象をつくるにはどう考え, 手を動かすべきか. 
そのへんをずばっと説明している教科書を私は知らない. 
だから "インターフェイス指向設計" だけを責めてもフェアではないかもしれない. </p>
<p>そんな本を, いつか Martin Fowler あたりが書いてくれんかなーと勝手に期待している. 
そのときはオライリー/PragBook から出してね &gt; Martin Fowler.</p>
