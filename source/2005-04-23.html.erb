---
title: "よっぱらって帰宅しウェブをみたら, GCC4"
date: 2005-04-23
---
<p>近況</p><p>よっぱらって帰宅しウェブをみたら, <a href="http://gcc.gnu.org/gcc-4.0/">GCC4.0 がリリースされていた</a>. GCC の開発速度は目覚ましい. 魔窟なようなコードがハッカーを挑発するからか. <a href="http://gcc.gnu.org/gcc-4.0/changes.html">変更履歴</a> に C++ の項目は多く, この言語が stable からほど遠いことがわかる. C++ を仕事で使いたいという憧れは強いけれど, 本当に使うならコンパイラ限定, OS 限定, ライブラリ限定という制限つきでないと嫌だな. 最適化されるはず, というコードは信用できない. 最適化されたコードだけが信用できるから.</p><p>それはさておき, 高速化のキーワードに知らないものが多い. 私はコンパイラの勉強をしたことがないから仕方ないけれど, なんとなく悔しい. せめてわかった気になりたいから Google してみることにする. それにアプリケーションプログラマだって, コンパイラが何をしてくれるかを知っておいて損はない.</p><p>以下に列挙した最適化のキーワードは <a href="http://gcc.gnu.org/gcc-4.0/changes.html">changes.html</a> から. どれもが GCC4.0 から入った新機能ではなく, こういう最適化もしていますよ, というもの.</p><p></p><p>Scalar replacement of aggregates</p><p>構造体のフィールドを普通の変数のように扱うこと. レジスタ割当とかで有利になる, らしい. 構造体の変数が複数あった時に, 構造体まるごとではなくフィールド単位でレジスタに割当てをしてくれるということか. なんとなく当り前に思えるけど, 今までやってなかったのかな...印象より大変なのかもしれない.</p><p></p><p>Constant propagation</p><p>演算の結果を追跡して, 定数として扱える変数を定数にするというもの. オフラインで計算しマジックナンバーとしてソースコードに埋め込んでいたところを, ソースコードに計算過程ごと書けるようになると. 便利そう.</p><p></p><p>Value range propagation</p><p>上のに似ているけれど, もうちょっと大変そう. ある変数のとりうる値を絞りこんでおき, それを利用した最適化をするというものらしい. たとえば, switch や if などの分岐で絶対に通らないパスを削除できたり, 分岐そのものを排除できたりする. 絶対通らないパスなんで作らずに assert しておけという気もする. 実際は他にも有用なケースがあるのかもしれない. </p><p></p><p>Partial redundancy elimination</p><p>よくわからない. まず redundancy elimination というのがあって, これは冗長な計算(同じ式の評価)を削除して結果を再利用するというものらしい. 演算というと四則演算とか関数呼出しみたいのを連想するけれど, よくあるオブジェクト参照連鎖 (foo.bar.baz() みたいの) も eliminate されるので嬉しい.</p><p>で, 式の一部分から冗長な部分を抜きだしてくれるのが partial redundancy elimination ということか. partial でない redundancy elimination はあまり嬉しくない気がする. Google で検索しても, "partial redundancy elimination" の方がよくひっかかる.</p><p></p><p>Load and store motion</p><p>load とか store 命令を loop の外側におしだしてくれる, とのこと. ループ内で参照してループの外に押し出せる変数(つまりループ内では定数な値)なんてレジスタに載りそうなものだけれど, 巨大なループでは有効か. 命令レベルの最適化の話はよくわからない.</p><p></p><p>Strength reduction</p><p>これはよく聞くやつ. 重い計算を軽い計算に置きかえるというもので, Dragon Book にも載っているらしい.</p><p></p><p>Dead store elimination</p><p>これは名前から想像がつく, 参照しない変数への保存はスキップするというもの. 有難味の度合は不明. </p><p></p><p>Dead and unreachable code elimination</p><p>これも名前どおり.</p><p></p><p>Autovectorization</p><p>これは比較的最近の話題らしい. C のコードを CPU の並列命令 (SSE, Maltivec) にマップしてくれるというもの. 具体的にどんなコードが並列化されるのは自明でない. 文書を読まないとわからない. 単純な for ループでできそうはものはしてくれる, らしい. グラフィクスプログラマはこういうのを意識して書くとかなり嬉しい気がする.</p><p></p><p>Loop interchange</p><p>ネストしたループの入れ子関係に細工したり, 外部に押し出せるものを押し出すなどする高速化. 行列の掛け算などで効くという. アプリケーションプログラマは既存の枯れたライブラリを使うのが吉ではあるが, これから GCC を使ってその手の線型代数ライブラリを書く人はいいかもしれない. 私には, 具体的に何がおこるのか直感的に把握できない.</p><p></p><p>Tail recursion by accumulation</p><p>tail recursion は lisp の一味で有名な最適化, 再起呼出しをループになおす. "by accumulation" が何なのかはわからない.</p><p></p><p>Swing Modulo Scheduling</p><p>さっぱりわからない. 記事を読んでもわからなそうなので挫折する. パイプラインを意識した高速化なんだろうか. これを意識したコードを書く, という種類のものでもないからわからなくても困らないのだけれど, こうさっぱりわからないと悲しい.</p><p></p><p> 資料を眺めていると, ここには非常に高度なテクノロジーと大量の実装資源が投入されていることがわかる. 奇特なグルが物好きでメンテナンスしている枯れた技術だと思っていたけれど, 企業の研究所なども contribute している. GCC はオープンソース・プロジェクトのバックエンドであると同時に, 最前線のオープンソース・プロジェクトなのだなあ. 感動.</p><p></p><p>参考資料</p><p> <ul></p><p> <li><a href="http://www.europe.redhat.com/software/gnupro/technical/gnupro_gcc.php3">GCC Optimization</a></li></p><p> <li><a href="http://www.nullstone.com/htmls/category/consprop.htm">Constant Propagation</a></li></p><p> <li><a href="http://compilers.iecc.com/comparch/article/95-12-014">Comp.compilers: Value range tracing</a></li></p><p> <li><a href="http://www.intel.com/technology/itj/q41999/pdf/compiler.pdf">An Overview of the Intel IA-64 Compiler</a></li></p><p> <li><a href="http://modular.fas.harvard.edu/docs/debian-packages/libg2c0-dev/gccint.html">GNU Compiler Collection (GCC) Internals</a></li></p><p> <li><a href="http://gcc.gnu.org/projects/tree-ssa/vectorization.html">Auto-vectorization in GCC</a></li></p><p> <li><a href="http://www.na.cse.nagoya-u.ac.jp/~reiji/lect/mvprod.html">Loop Interchange</a></li></p><p> <li><a href="http://en.wikipedia.org/wiki/Tail_recursion">Tail recursion - Wikipedia, the free encyclopedia</a></li></p><p> <li><a href="http://gcc.gnu.org/news/sms.html">SMS - Swing Modulo Scheduling in GCC</a></li></p><p> <li><a href="http://www.gccsummit.org/2004/2004-GCC-Summit-Proceedings.pdf">2004 GCC Summit Proceedings(PDF)</a></li></p></ul>
