---
title: "近況 - デブサミ2010を観にいった"
date: 2010-02-20
---
<h3>近況 - デブサミ2010を観にいった</h3>
<p>このページのロードが遅い. たぶん前回 Amazon 画像を貼りつけすぎたせいだとおもう. 
前回および前々回のページをさっさと追い出すべく何か書きたい. </p>
<p>金曜日は同僚に仕事をおしつけ <a href="http://codezine.jp/devsumi/2010/">デブサミ2010</a> を観にいった. 
パワハラの恩はとんかつで返すからね...などと思いつつ聴講していたらパワハリーから "バグがでた" とメールが届き
直しに戻ったため 3 コマしか観られず. こんにゃろうとんかつはナシだと思ったら私のバグだった. 
はいはいとんかつとんかつ...</p>
<h4>OpenSocial ケータイ Game 戦国時代</h4>
<p>mixi と DeNA による各社プラットホームの紹介. 
OpenSocial 自体の話はさておき両社の対比が面白かった. 
Facebook のノリで汎用のソーシャルアプリ環境を目指す mixi と, ケータイ向けウェブゲームにフォーカスしている DeNA. 
狙いの明確さは DeNA の方が上に見えた. ケータイ向けゲームを作ってくださいというのは, 
ソーシャルアプリを作ってくださいというよりだいぶわかりやすい. 
拡張 API も Avatar のようなゲームに特化して課金につなげやすいものがある. </p>
<p>mixi アプリは OpenSocial の壮大な野望をそのままひきついでしまい, 
ゲームみたいなわかりやすいジャンルに開発資源を振り向け切れずにいる印象. 
まあ mixi はゲームサイトじゃないので仕方ない. 戦略の善し悪しというより時代の流れな気がする. </p>
<p>mixi アプリもコミュニティから情報がとれれば特定コミュニティ向けアプリみたいのが作れて
SNS らしさが生きるんじゃないかなあ, などと同僚と話していた. 
まあイベント登録にしか mixi を使ってない私が言っても机上の空論だけれど. </p>
<h4>Agility@Scale(アジャイル開発のスケールアップ)を実現する14のベストプラクティス</h4>
<p>IBM でも地域分散の大チームでアジャイルやってますよ, という話. 
IBM 社内で <a href="http://www-01.ibm.com/software/rational/jazz/">Jazz</a> という製品を開発した際の事例を
ケーススタディとして使っていた. 巨大アウトソース網で受託開発をする縦方向のスケールアップを期待した人は肩すかしだったかも. 
私も(怖いもの見たさで)少しそれを期待していたけれど, 実際にはまっとうな話だった. </p>
<p>コンポーネント単位でチームをわけ, ただしアーキテクチャの面倒をみるる横串なチームは残す. 
プロジェクトのビジョンを保守する PMC チームを置く. 
非機能要件を含めた総合試験をする QA のチームは機能開発のチームと別に置く. 
各チームの足並みを揃える "リリーストレイン". 最後のイテレーション(?) を安定化のための "エンドゲーム" にあてる. 
ステークホルダーのためのダッシュボードを用意する. など. 
正直なところ遠くの国のお話感は否めないけれど, 正攻法には嘆息した. 
セッション前半で一般的なアジャイルの入門に時間を使ってしまったせいで後半がかけあしになってしまい残念. 
もうアジャイル紹介はいらないんじゃないのかな...</p>
<p><a data:asin='4798120405' href='http://www.amazon.co.jp/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E9%96%8B%E7%99%BA%E3%81%AE%E6%9C%AC%E8%B3%AA%E3%81%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%83%E3%83%97-%E5%A4%89%E5%8C%96%E3%81%AB%E5%BC%B7%E3%81%84%E5%A4%A7%E8%A6%8F%E6%A8%A1%E9%96%8B%E7%99%BA%E3%82%92%E6%88%90%E5%8A%9F%E3%81%95%E3%81%9B%E3%82%8B14%E3%81%AE%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9-IT-Architects%E2%80%99-Archive/dp/4798120405%3FSubscriptionId%3D0SRV0GVS2Q5FGJTWHV82%26tag%3Dstepstophanta-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798120405'>本</a> の宣伝も兼ねていたらしい. この本を読んでみようと思う位には興味深い内容だった. 
Jazz は Rational の血を引く製品らしいので, RUP とかなんとか言ってた人達が agile をどう解釈したのかは気になる. 
特に国内だと agile はどうにも信仰心駆動でボトムアップになりがちだけれど, 
こうやって論理的かつ打算的に agile すればトップダウンに agile できる機会に繋がり裾野を広げるのではないかと思った. 
IBM がんばれ. </p>
<h4>成長できるエンタープライズシステムを目指して- OSGiによるモジュール型アーキテクチャの実現</h4>
<p>せっかく総花的な催し物に来ているんだから普段は興味のないものを聞いてみようと, 
二つの無興味ワード "エンタープライズ", "OSGi" を含むセッションへ. </p>
<p>が, これが予想外に面白かった. エンタープライズはどうでもいいけれど, OSGi はよくでてるなーと感心した. 
Java のコンポーネント再利用は lib/ 以下に必要な jar をぜんぶ投入するところで歩みをとめ
EJB や SOA みたいな不幸な方向にレミングしいると思いこんでいた. OSGi もその一味だと思ったら違った. 不勉強. 偏見よくない. </p>
<p>OSGi はクラスローダーのチェインを使って依存関係を表現し, 異バージョンの混在も許す. 
manifest ファイルもそれほど悲惨な複雑さにはなっていないように見える. 
Java にありがちな重量級仕様を想像していたけれど, 少なくともユーザに見える部分は割と単純で筋がよさそう. 
Eclipse の成長は OSGi が支えているという講演者の主張にも説得力があった. </p>
<p>ここ数年アーキテクチックな話には近づかないようにしてたけど, 今更ながら OSGi は勉強していいかもしれないと思った. 
登場から 10 年たっても現役のフレームワーク技術なんて, そうそう無いからね. </p>
